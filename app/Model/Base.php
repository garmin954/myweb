<?php

namespace App\Model;

use Illuminate\Database\Eloquent\Model;

class Base extends Model
{

    protected $switchField;

    public function getTable()
    {
        return parent::getTable(); // TODO: Change the autogenerated stub
    }


    /**
     * 根据主键更新数据
     * @param $data
     * @return mixed
     */
    public function saveData($data)
    {
        foreach ($data as $field=>$val) { // 过滤空值的
            if (empty($data[$field]) && intval($data[$field]) !== 0) {
                unset($data[$field]);
            }
        }

        foreach ($this->switchField as $field) {
            $data[$field] = 0;
        }

        $id = $this->primaryKey;
        if (!isset($data[$id]) || !$data[$id]) {   // 新增
            $res = $this->insertGetId($data);
        } else { // 更新
            $res = $this->where($id, $data[$id])->update($data);
        }

        return $res;
    }

    /**
     * 查询数据分页
     * @param $pageIndex
     * @param $pageSize
     * @param $conditon
     * @param $order
     * @param $field
     */
    public function getPageQuery($viewObj,$pageIndex=1, $pageSize=PAGE_SIZE, $condition=[], $order=[], $field='*')
    {
        if (empty($order)){
            $order = $this->primaryKey;
        }
        $currSize = ($pageIndex-1)*$pageSize;
        $list = $viewObj->offset($currSize)->limit($pageSize)->orderBy($order)->where($condition)->get();

        return $list;
    }


    /**
     * 获取数量
     * @param $viewObj
     * @param array $condition
     */
    public function getCount($viewObj, $condition=[])
    {
        $count = $viewObj->where($condition)->count();

        return $count;
    }


    /**
     * 改变值
     */
    public function changeField($param)
    {
         $res = $this->where($this->primaryKey, $param['id'])->update([
             $param['field'] => $param['value']
         ]);

         return $res;
    }


    /**
     * 获取下级
     * @param $pid
     * @param $data
     * @param int $level
     * @return array
     */
    public function getSonList($pid, $data, $level=1)
    {
        if (!is_array($data)){
            $data = $data->toArray();
        }
        static $arr = [];
        foreach ($data as $val){
            if ($val['pid'] == $pid){
                $val['level'] = $level;
                $arr[] = $val;
                $this->getSonList($val[$this->primaryKey], $data, $level + 1);
            }
        }

        return $arr;
    }


    /**
     * 获取下级
     * @param $pid
     * @param $data
     * @return array
     */
    public function getSonTree($pid, $data)
    {
        if (!is_array($data)){
            $data = $data->toArray();
        }

        $arr = [];
        foreach ($data as $val) {
            if ($val['pid'] == $pid){
                $val['child'] = $this->getSonTree($pid, $data);
                $arr[] = $val;
            }
        }

        return $arr;
    }
}
